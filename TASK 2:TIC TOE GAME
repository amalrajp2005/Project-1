<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic Tac Toe</title>
    <link rel="stylesheet" href="body.css">
</head>
<body>
    <div class="container">
        <h1>Tic Tac Toe</h1>
        <div class="board" id="board"></div>
        <div id="status"></div>
        <button id="reset" class="hidden">RESTART</button>
    </div>

    <script>
        const board = document.getElementById('board');
        const status = document.getElementById('status');
        const resetButton = document.getElementById('reset');
        let currentPlayer = 'X';
        let cells = Array(9).fill(null);
        
        function createBoard() {
            board.innerHTML = '';
            cells = Array(9).fill(null);
            cells.forEach((_, index) => {
                const cell = document.createElement('div');
                cell.classList.add('cell');
                cell.dataset.index = index;
                cell.addEventListener('click', handleClick, { once: true });
                board.appendChild(cell);
            });
            status.textContent = `Player ${currentPlayer}'s turn`;
            resetButton.classList.add('hidden');
        }

        function handleClick(e) {
            const cell = e.target;
            const index = cell.dataset.index;
            
            cells[index] = currentPlayer;
            cell.textContent = currentPlayer;
            cell.classList.add('taken');

            if (checkWinner()) {
                status.textContent = `Player ${currentPlayer} wins!`;
                endGame();
            } else if (cells.every(cell => cell)) {
                status.textContent = 'It\'s a draw!';
                endGame();
            } else {
                currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
                status.textContent = `Player ${currentPlayer}'s turn`;
            }
        }

        function checkWinner() {
            const winningCombos = [
                [0, 1, 2], [3, 4, 5], [6, 7, 8],
                [0, 3, 6], [1, 4, 7], [2, 5, 8],
                [0, 4, 8], [2, 4, 6]
            ];

            return winningCombos.some(combo => {
                const [a, b, c] = combo;
                return cells[a] && cells[a] === cells[b] && cells[a] === cells[c];
            });
        }

        function endGame() {
            document.querySelectorAll('.cell').forEach(cell => 
                cell.replaceWith(cell.cloneNode(true))
            );
            resetButton.classList.remove('hidden');
        }

        resetButton.addEventListener('click', createBoard);

        createBoard();
    </script>
</body>
</html>


**************
body.css

body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
    font-family: Arial, sans-serif;
}
.container {
    text-align: center;
    font-family: Arial, Helvetica, sans-serif;
    font-style: italic;
    color: rgb(79, 201, 238);
    background-color: black;
    padding: 20px;
}
.board {
    display:grid ;
    grid-template-columns: repeat(3, 100px);
    grid-template-rows: repeat(3, 100px);
    gap: 5px;
}
.cell {
    width: 100px;
    height: 100px;
    background-color: #f0f0f0;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 2em;
    cursor: pointer;
}
.cell.taken {
    cursor: not-allowed;
}
#status {
    margin-top: 20px;
    font-size: 1.5em;
}
.hidden {
    display: none;
}
